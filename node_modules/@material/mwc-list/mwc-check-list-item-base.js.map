{"version":3,"file":"mwc-check-list-item-base.js","sourceRoot":"","sources":["mwc-check-list-item-base.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,wBAAwB,CAAC;AAGhC,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,aAAa,CAAC;AAClD,OAAO,EAAC,QAAQ,EAAC,MAAM,+BAA+B,CAAC;AAEvD,OAAO,EAAc,YAAY,EAAC,MAAM,sBAAsB,CAAC;AAE/D,MAAM,OAAO,iBAAkB,SAAQ,YAAY;IAAnD;;QAI6B,SAAI,GAAG,KAAK,CAAC;QACC,YAAO,GAAgB,SAAS,CAAC;IA2C5E,CAAC;IAzCC,MAAM;QACJ,MAAM,eAAe,GAAG;YACtB,mCAAmC,EAAE,IAAI,CAAC,IAAI;YAC9C,gCAAgC,EAAE,CAAC,IAAI,CAAC,IAAI;SAC7C,CAAC;QAEF,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;YACtB,IAAI,CAAA,EAAE,CAAC;QACX,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA,EAAE,CAAC;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEnC,OAAO,IAAI,CAAA;QACP,MAAM;QACN,OAAO;QACP,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;oBACT,QAAQ,CAAC,eAAe,CAAC;;;uBAGtB,IAAI,CAAC,QAAQ;uBACb,IAAI,CAAC,QAAQ;wBACZ,IAAI,CAAC,QAAQ;sBACf,IAAI,CAAC,QAAQ;;;QAG3B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;QACrB,IAAI,EAAE,CAAC;IACb,CAAC;IAES,KAAK,CAAC,QAAQ,CAAC,GAAU;QACjC,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAkB,CAAC;QACxC,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,OAAO,CAAC;QAE1D,IAAI,CAAC,cAAc,EAAE;YACnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;YACjC,MAAM,IAAI,CAAC,cAAc,CAAC;YAC1B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SAC/B;IACH,CAAC;CACF;AA/CgB;IAAd,KAAK,CAAC,MAAM,CAAC;sDAA8C;AACrC;IAAtB,KAAK,CAAC,cAAc,CAAC;0DAAsC;AAEjC;IAA1B,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;+CAAc;AACC;IAAxC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;kDAAkC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '@material/mwc-checkbox';\n\nimport {Checkbox} from '@material/mwc-checkbox';\nimport {html, property, query} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true}) graphic: GraphicType = 'control';\n\n  render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n"]}